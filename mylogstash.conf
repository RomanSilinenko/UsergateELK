
input {
  # live syslog protocol via udp and tcp port
  syslog {
    port => 5514
    type => "syslog"
    syslog_field => "syslog"
    codec => "cef"
    grok_pattern => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:timestamp}%{SPACE}%{SYSLOGHOST:syslog_host}%{SPACE}%{PROG:program}\[\w+\]:%{SPACE}%{GREEDYDATA:message}"
    tags => [ "process_live", "syslog" ]
  }
}



filter {
  if [type] == "syslog" {
    #    if "process_live" in [tags] {
    #      mutate {
    #        rename => {
    #          "program" => "syslog_program"
    #          "logsource" => "syslog_hostname"
    #          "pid" => "syslog_pid"
    #          "timestamp" => "syslog_timestamp"
    #        }
    #
    #       add_tag => [ "got_syslog_timestamp", "got_syslog_hostname", "got_syslog_program" ]
    #        ### DEBUG
    #        ###add_field => { "orig_message" => "%{message}" }
    #      }
    #    }
    #      if "syslog" in [tags] {
    #         mutate {
    #           add_field => { "path" => "syslog from %{host}" }
    #         }
    #      }
    if [deviceEventClassId] == "idps"{
      geoip {
        source => "sourceAddress"
      }
    }  

    mutate {
    rename => { "deviceCustomNumber1" => "%{deviceCustomNumber1Label}"}
    rename => { "deviceCustomNumber2" => "%{deviceCustomNumber2Label}"}
    rename => { "deviceCustomNumber3" => "%{deviceCustomNumber3Label}"}
    rename => { "deviceCustomString1" => "%{deviceCustomString1Label}"}
    rename => { "deviceCustomString2" => "%{deviceCustomString2Label}"}
    rename => { "deviceCustomString3" => "%{deviceCustomString3Label}"}
    rename => { "deviceCustomString4" => "%{deviceCustomString4Label}"}
    rename => { "deviceCustomString5" => "%{deviceCustomString5Label}"}
    rename => { "deviceCustomString6" => "%{deviceCustomString6Label}"}
    rename => { "flexString1" => "%{flexString1Label}"}
    rename => { "flexString2" => "%{flexString2Label}"}
    }

    #remove generinc not interesting log parameters
    mutate {
      remove_field => ["facility_label",
                       "program",
                       "syslog",
                       "cefVersion",
                       "facility_label",
                       "facility",
                       "deviceVersion",
                       "deviceVendor",
                       "deviceProduct",
                       "deviceCustomNumber1Label",
                       "deviceCustomNumber2Label",
                       "deviceCustomNumber3Label",
                       "deviceCustomString1Label",
                       "deviceCustomString2Label",
                       "deviceCustomString3Label",
                       "deviceCustomString4Label",
                       "deviceCustomString5Label",
                       "deviceCustomString6Label",
                       "flexString1Label",
                       "flexString2Label"
                       ]
    }

    # Elastic search does not accept CAPITAL letters in index names, so we have to lowercase it. 
    mutate{
        rename => {"deviceEventClassId" => "deviceeventclassid"}
    }

    ## Valid conversion targets are: integer, float, string, and boolean.
    #    mutate {
    #        convert => [
    #                        {"bytesOut" => "integer"},
    #                        {},
    #                        {},
    #                        {},
    #                        {},
    #                        {},
    #                   ]
    #    }
  }
}

filter {
  if "parse_done" in [tags] and "_defaultparse" in [tags] {
    mutate {
      remove_tag => [ "_defaultparse" ]
    }
  }
}

output {
  # syslog messages
  if [type] == "syslog" {
          elasticsearch { hosts => ["http://172.17.0.2:9200"]
			  index => "cef-%{deviceeventclassid}-%{+YYYY.MM.dd}"
                          template => "/config-dir/elastic_cef_template.json"
                          template_name => "firewall-cef"
                          template_overwrite => true                    
           }
   }
}


